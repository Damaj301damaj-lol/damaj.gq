<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
  <title>speedie's blog</title>
  <link>https://speedie.site/blog.php</link>
  <description>speedie's blog about free software, minimalism and other things I find interesting.></description>
  <atom:link href="https://speedie.site/rss.xml" rel="self" type="application/rss+xml" />
  <item>
        <title>How I got into GNU/Linux</title>
        <link>https://speedie.site/articles/post37.php</link>
        <guid>https://speedie.site/articles/post37.php</guid>
        <pubDate>Tue, 13 Dec 2022 00:00:00 +0100</pubDate>
        <description>
                    <![CDATA[<h3>I AM FINALLY FREE! Time to unfree myself.</h3>
                    <p>I am back. I finally got released from prison after Google put me there and <a href="https://speedie.site/articles/post36.php">forced me to write a blog post.</a>.</p>
                        <p>Today I want to talk about getting into GNU/Linux and free software, how I got into it and how you can get into it yourself. But because my "started using GNU/Linux" story is so short, I'm gonna also talk about how I got into certain software like dwm and Gentoo, since normies tend to call this stuff difficult.</p>
                    <h3>My first encounter with GNU/Linux</h3>
                        <p>My first encounter with the GNU/Linux operating system was in 2011 when I found out about this new "fancy" operating system called Ubuntu GNU/Linux. People like myself reading this blog post right now might say "DOnT yOU hATe UbUnTU?!?!?" but back then, it was very different from what it is now.</p>
                        <p>Back then, it was a fairly nice system. I didn't end up sticking with it as you'll read later, because it wasn't able to run most of my software. For this reason, I went back to Windows 7 and forgot about Ubuntu and the wonders of GNU/Linux and free software.</p>
                        <p>Either way I kept using Ubuntu for a few months (not sure why I didn't stick with it after that) and used the absolute garbage that is Wine to attempt to emulate the Windows experience I was familiar with instead of attempting to learn new software. Probably the most common mistake any new user makes.</p>
                    <h3>Most easy distros are terrible</h3>
                        <p>In 2017 or so I went back to trying out various GNU/Linux distributions like Elementary OS and Manjaro, all of which are absolute garbage distros that barely work. While it may be different now, I can't help but stop and ask; Why are all "easy" distros so bad?</p>
                        <p>The answer is going to be different depending on who you ask but since you're reading my blog, I'll answer it. It's because they try to make the wonders of GNU/Linux something that it isn't. They try to turn it into a free version of Windows, rather than making 'the ultimate OS'. </p>
                        <p>This stupid direction made all easy distros end up using this stupid software that takes the bad from Windows and nothing good and what you get is an absolute mess which is going to break within a month.</p>
                        <p>Long story short, lasted a few weeks and then went back to Windows.</p>
                    <h3>Freedom is hard to resist</h3>
                        <p>However, freedom was hard to resist so I kept trying out various distributions in my free time but never ended up finding anything I actually liked. Eventually I got sick and tired of Windows doing stupid Windows-y things and installed Ubuntu.</p>
                        <p>After all, it had been years since I last used it (2011) but maybe software support has improved, I thought. Yes, software support had improved but everything else SUCKS. It was slow, had terrible default applications, grub broke all the time, kernel was missing, X doesn't even start properly, and many many more issues.</p>
                        <p>I then later reinstalled Ubuntu in the hopes that I had messed something up. User error is normal, I thought. After that, I didn't really encounter any more issues and I was able to do most things just fine on my computer. I still don't know why it just NOW works properly.</p>
                        <p>After a while I started learning to write basic shell scripts, because that's what you do when you have free time and want to learn how to use your computer properly. It's a great way to learn your system.</p>
                        <p>While watching some bad YouTube guides on the basics of shell scripting, I saw this one guy with a really cool desktop. "WHAT.. WhAT?!?!? IT TILES???? WAOW". Through a simple search and some reading on window managers, I installed i3-gaps on my then Ubuntu system and switched to using it. I really started to like customizing my system, and I loved efficient, quick keybinds for everything.</p>
                    <h3>Distro that sucks less</h3>
                        <p>Ubuntu was of course holding me back from the customization I wanted to do, and had thousands of packages even after removing all the GNOME garbage. I had already been experimenting with Arch for a while on my old iMac.</p>
                        <p>Out of boredom, one day I decided to install Gentoo in a virtual machine. It was more as a challenge more than anything, because as I understood it, this distribution was difficult to use and install. (Now that's false, but that's another issue)</p>
                        <p>Eventually, when Ubuntu yet again broke, I decided to install Gentoo on my system. It took a while due to the weak processor I used to have.</p>
                    <h3>suckless software</h3>
                        <p>Around this time, I was told about suckless software; specifically dwm. It basically looked like i3 but more convenient to use. It also seemed like a great window manager because it was configured through source code meaning it's very extensible and hackable.</p>
                        <p>So for my new Gentoo system, I installed dwm instead of i3 and started configuring it. You can actually still use my dwm build from then, it can be found <a href="https://github.com/speediegq/dwm">here</a>. This made my computer feel so much better and so much more usable and extensible. I cannot recommend learning software like this enough.</p>
                    <h3>Then to now.</h3>
                        <p>Not much has changed. Sure, I've switched to/from software but I'm still learning about the system and software I use. There really is no end to learning about technology and software. It keeps going as long as you're interested in learning further.</p>
                    <h3>How can I get into it too?</h3>
                        <p>My number one tip for people trying to get into GNU/Linux is this; don't give up too early. Expect to face challenges but be smart and attempt to work around them.</p>
                        <p>And as I mentioned above, instead of trying to run your spyware software, try to run free software compatible with GNU/Linux rather than the Windows-only software you're already running.</p>
                        <p>Finally, don't expect to learn everything instantly. You learn as you go, and you learn from your mistakes.</p>
                    <h3>The most generic conclusion in history</h3>
                        <p>I am now a Gentoo GNU/Linux user. Overall, it's been a great experience and I love the freedom and customization I can do to my desktop. I'm able to make it anything I can imagine. It truly is great and it's the peak of computing; well, other than writing your own operating system.</p>
                        <p>Thank you for reading the blog post, have a good day!</p>]]>
        </description>
</item>
<item>
        <title>I WILL make music great again. (My next project)</title>
        <link>https://speedie.site/articles/post38.php</link>
        <guid>https://speedie.site/articles/post38.php</guid>
        <pubDate>Tue, 20 Dec 2022 00:00:00 +0100</pubDate>
        <description>
            <![CDATA[<h3>Finally something worth your time?</h3>
                   <p>Time for something a little different than usual. Today I'm going to talk about my next project that I am working on as we speak. It usually starts with 'boo this program sucks, let's write something that does what I need it to do better than the current options and this time, it's no exception.</p>
                   <p>As you know, I've been working rather heavily on my dwm build; speedwm. I've been trying to <em>iron</em> out bugs with it and generally make it the window manager (or computer setup in general) of my dreams. After I reached 800 commits just a few days on the new speedwm repository alone, not to mention the many more on the old repositories, which adds up to over a thousand commits, I realized that I am trying to improve something that doesn't really desperately need improvement.</p>
                   <p>Now that I'm fairly happy with it, I am going to start a new project. I might work slowly on speedwm, and hope to have a 1.9 release out soon but I don't plan on making any more massive changes to it. So as usual when it's new project time, what happens is I think of a piece of software that sucks and then I try to make something that fixes the flaws. What is it this time?</p>
               <h3>Make music great again</h3>
                   <p>Yes, you heard me right. I am going to write a music player. Or rather a mpd frontend, because it would be stupid to reimplement something that already works well, right?</p>
                   <p>Now, I am listening to music through cmus as I am writing this blog post for you, and I have to say it's generally a great music player. It's light, fast, Vim-like and fairly polished and clean. Unlike the mocp I was using earlier, it has a UI more like.. you know, a music player than a file manager which is one of the reasons why I much, <em>much</em> prefer cmus. So why does this need change then?</p>
               <h3>cmus is not built for window managers</h3>
                   <p>Yeah, I said it. One of the problems with cmus is how difficult it is to manage it through the command-line. There is cmus-remote, however even with this you often have to use lots of slow awk commands to get the format you want.</p>
                   <p>I plan on solving this by adding window manager/status friendly syntax which allows the user to specify a format, no slow awks or seds in your status script.</p>
               <h3>Lack of extensibility</h3>
                   <p>None of the music players/mpd frontends I've looked at are extensible enough for my taste. I want to be able to make it extremely minimal or command-line Spotify without any delay or external programs.</p>
                   <p>It doesn't help that cmus and a lot of other music players don't seem to be maintained very much. Most of them seem to be written for TTY users, and don't have a lot of fancy features. This is not great when you want a light (but feature rich) music experience.</p>
                   <p>I plan to solve this by keeping the base small and clean, as well as a very well documented codebase unlike suckless software. While I for the most part like their philosophy, I am not a fan of how they refuse to add any meaningful comments to their code.</p>
               <h3>Cool planned features</h3>
                   <p>None of these have been implemented yet but I might end up implementing them. Some as modules, some built into it.</p>
                       <ul>
                           <li>Vim-like default keybinds but of course ones that can be changed. Extensibility is one of my goals for this project and is one problem I have with cmus and the countless other players.</li>
                           <li>FLAC support. This is an absolute must and I will not release it before FLACs play perfectly. I am a sucker for lossless music and those mp3s can go back to history.</li>
                           <li>Cover art previews. This is not an absolute must, but it would be really nice to have sixel/ueberzug/w3m previews for this player.</li>
                           <li>Different approach. Instead of using patches like I do for most of my software, I plan on providing a simple base with a plugin system. If I end up writing it in POSIX shell, I could simply <code>.</code> plugins in the config file. This would be easy to configure and very customizable.</li>
                           <li>macOS and BSD compatibility. I want support for many operating systems, and a mpd frontend has no reason not to work on macOS and BSD. That said, I may need some help implementing macOS stuff, please contact me if you're willing to help and test it for me.</li>
                           <li>Usage of ncurses?</li>
                           <li>Maybe this could've been mentioned earlier, but I want wide image support. I won't implement stuff like Kitty image previews, but feel free to PR for it :)</li>
                           <li>External piping. This could for example allow anything to be piped into programs like fzf, dmenu or rofi.</li>
                           <li>Playlists. Simple as, I suppose.</li>
                           <li>Auto downloading metadata using something like Musicbrainz.</li>
                           <li>Few dependencies. This is not a requirement because the target userbase is window manager users like myself, not TTY minimalist LFS users, but it would be nice to save Gentoo users like myself some compile times.</li>
                           <li>Perhaps ability to download a music video or something similar. This is really just for show and probably wouldn't be very useful in practice so I don't think this will happen.</li>
                       </ul>
               <h3>Ideas</h3>
                   <p>If you have any ideas for this project, please consider emailing me it. I want to make this project as good as it can be.</p>
               <h3>Naming?</h3>
                   <p>I have no idea what to name this mpd frontend, if you have any suggestions feel free to send me a suggestion.</p>
               <h3>End.</h3>
                   <p>Going to end the blog post here as I've already rambled on and on about how music players suck and what I want it to do. Thank you for reading and have a great rest of your day!</p>]]>
        </description>
</item>
<item>
        <title>Goodbye 2022..</title>
        <link>https://speedie.site/articles/post39.php</link>
        <guid>https://speedie.site/articles/post39.php</guid>
        <pubDate>Sat, 31 Dec 2022 00:00:00 +0100</pubDate>
        <description>
            <![CDATA[<p>2023 is basically here and that means 2022 is over. Happy new year to everyone who follows my blog. March is going to mark 1 year since the first blog post, but there's still a good while until we reach that milestone.</p>
                     <p>Anyhow, I was planning on making a long blog post about 2022 and how.. mixed it was but because I had too much fun, I did not have time to finish it. I didn't really like what I had written anyway so for this year, a small blog post like this one will have to do. What a shame?</p>
                     <p>Nothing is really going to change as 2023 comes around. Blog posts are still going to come occasionally like normal. Either way, since I bothered to make this blog post, I might as well talk about some things that don't really deserve their own blog posts.</p>
                     <p>First of all, mph (the music player project I announced last blog post) is still alive, I did not cancel it like a lot of my other projects. While I had to stop working on it for a bit because I ran out of time and had to fix some critical bugs in other projects, I have implemented a basic plugin system for it now and I'm in the process of implementing basic playback.</p>
                     <p>Secondly, another project of mine, fontctrl got a 1.2 release recently. The release adds support for batch font installation, and can now also take stdin which is probably useful. I highly recommend you try out fontctrl if you're a user of a minimal GNU/Linux system that does not have a GUI font manager already.</p>
                     <p>I have also been making a few (small) changes to speedwm, mostly keybind related. There's now inset support, and it has been updated to the latest suckless commit. Documentation has also been updated and there's now a KeyPress/KeyRelease option which should fix various bugs. Finally rounded corners have been removed because they were buggy and ultimately don't look that good so I removed them. Users who want rounded corners can use picom instead which does rounded corners better than speedwm ever did. Plus it also allows rounded corners for the bar which speedwm never did.</p>
                     <p>speedwm-extras (separate project) was also updated slightly, specifically audioctrl and btctrl, which now work much better.</p>
                     <p>As for the final update, the donate page now has a Vultr referral link, which if you use it will give me $10 in credit or about 1 month of free server uptime. Feel free to use that if you want to support me and get yourself a VPS.</p>
                     <p>Either way, that's it for this blog post, and next blog post (in the next year) will be post number 40! Happy new year everyone, and have a good day!</p>]]>
        </description>
</item>
<item>
        <title>Let's talk about Project 081 0.6</title>
        <link>https://speedie.site/articles/post40.php</link>
        <guid>https://speedie.site/articles/post40.php</guid>
        <pubDate>Tue, 03 Jan 2023 00:00:00 +0100</pubDate>
        <description>
            <![CDATA[<p>So.. because I keep getting questions about Project 081, even though I don't really work on it much anymore, I thought I'd make this blog post as an update on it as well as why it's taking so damn long. Also if this blog post comes across as negative, I'm sorry, it's 5 AM and I'm tired. Suck it up.</p>
                        <p>I will be honest here, I hate working on Project 081, and this is not because I think the project is bad, or even because its ABSOLUTELY PROPRIETARY (hopefully one day we get the source code for Tiger). It's because it's a massive pain to test it or even to create a basic image. As I mentioned in the issue on the GitHub repository, testing the project has been a challenge for multiple reasons. Here are just a few:</p>
                        <ul>
                            <li>Different hardware.</li>
                                <p>In order to even test this project, you <strong>need</strong> a real Mac compatible with it. Now, we know what machines are compatible to some extent and we know what hardware those machines have but attempting to emulate that hardware is a massive pain and basically impossible.</p>
                                <p>That leaves owning the actual hardware, of course. Now, while I'm sure others are willing to test for me, even having to fix a syntax error in a Bash postinstall script or something would need the image to be updated. This means the user testing needs to download it, write it to a USB, test it, tell me what happened, and very likely repeat it over and over again. This sucks!</p>
                            <li>Creating the image.</li>
                                <p>Confession time here, the image used to be created on Windows which had no way to automate it whatsoever. This meant making all of it from scratch which would take ages.</p>
                                <p>Even on GNU/Linux, mounting macOS disk images is a bit of a pain, but there it can at least be automated using a shell script. This would also be convenient because.. it's my operating system of choice.</p>
                                <p>Making the image on macOS would be ideal, because we can still write shell scripts there and the operating system supports mounting it natively. However this means macOS is <strong>required</strong> to even create a basic image, which sucks because I no longer actually use it as my operating system of choice. The best option, but still sucks.</p>
                            <li>Works on X, broken on Y.</li>
                                <p>This is the number one issue with Project 081 right now. If you've seen the <a href="https://github.com/p081/Project081">GitHub repository</a> for Project 081 and actually read the README or Issues, you'll without a doubt know that Project 081 doesn't even work on the MacBookPro4,1. This has been a known issue for a long time and a great example of this problem.</p>
                                <p>Now, Project 081 0.6 will partially fix this by only installing what your system needs based on the output of sysctl hw.model but still, this sucks too.</p>
                        </ul>
                        <p>That's not to say Project 081 0.6 is cancelled. I did say work on Project 081 ended on my page a while ago but that notice was removed after I realized that fixing this problem was fairly trivial. People have been asking me about the state of Project 081 though so clearly there is some demand for a new version.</p>
                        <p>For now, there's an open <a href="https://github.com/p081/Project081/issues/6">progress tracker for Project 081 0.6</a> which spawned out of <a href="https://github.com/p081/Project081/issues/4">this issue regarding blue screen.</a> The goal is to eventually fix this issue and get a proper version out but before that can happen, I need to get a script or something working so that this massive waste of time can be automated. That would only leave testing, which takes a bit part of the pain away.</p>
                        <p>Well then, to end this blog post off, I would like to mention how I'm very surprised that Project 081 is still (somewhat) in demand. Especially since it has not been actively worked on for over 2 years now. Yeah, insane I know. Time flies when you're.. ..not having fun.</p>
                        <p>If you have any more issues on any hardware, consider making an issue on the p081/Project081 repository as I do not want to have to make yet another release after this if I can avoid it. Thank you for reading this and have a good day!</p>]]>
        </description>
</item>
<item>
        <title>Why YouTube©️™️ doesn't recommend your videos.</title>
        <link>https://speedie.site/articles/post41.php</link>
        <guid>https://speedie.site/articles/post41.php</guid>
        <pubDate>Sun, 15 Jan 2023 00:00:00 +0100</pubDate>
        <description>
            <![CDATA[<p>Now, unless you're some big channel that uploads every day or something like that, you've no doubt experienced the absolute pain that is YouTube refusing to promote your videos.</p>
                    <p>Even if you're someone like me who doesn't really care that much about getting views or something and just casually uses the platform once a month or something to post stuff occasionally, you've no doubt noticed that if you upload videos in a short timeframe, no matter what it's about, it's almost guaranteed to get more views than anything you just post and forget about.</p>
                    <p>This is just a theory but I suspect Google and YouTube wants you to constantly push out new videos every day, even if it's total crap not worth 30 seconds of your time. As you know, I tend to only upload videos once a month or less, and that's for multiple reasons.</p>
                    <p>Firstly, I don't have time to push out content daily about the new cool dwm patch or whatever. Not only is it not very useful for the viewer and basically acts as filler, but it's a waste of time for me as well. Secondly, YOU don't have time to watch this filler garbage content that only exists to make YouTube push your content to people's feed.</p>
                    <p>I think a good example of this is if you look at my Forwarder Factory channel, which is now completely dead because I have zero plans to upload anythng to it, but anyways all of the old videos were successful and got plenty of views, despite the content of the videos being mostly crap.</p>
                    <p>I then of course stopped uploading to it for reasons I don't need to specify and 4 months later I broke the silence a nd posted something to it. Got 487 views which is absolutely nothing in comparison to what the earlier videos got. YouTube likely refused to promote this video because I hadn't been posting consistently up until that point.</p>
                    <p>Of course, this isn't always the case and we don't exactly know how the YouTube algorithm works because of course it is not free as in freedom software. Some topics combined with good timing are basically view magnets. My Windows 11 sounds video got over 100,000 views just because at that time Windows 11 had just leaked and almost no one had covered the topic yet.</p>
                    <p>Either way this YouTube thing is really frustrating and it's one of many reasons why I think being a 'YouTube Certified™️ Content Creator™️©️' is a waste of time for people like me. Even if you get less traffic to your website or whatever, I highly recommend that you stick to free/libre ways of spreading your word whenever possible such as using the LBRY network or even better, just having your own blog and website that you have control over, or at the very least, you don't trust YouTube.</p>]]>
        </description>
</item>
<item>
        <title>When will I use BSD?</title>
        <link>https://speedie.site/articles/post42.php</link>
        <guid>https://speedie.site/articles/post42.php</guid>
        <pubDate>Tue, 17 Jan 2023 00:00:00 +0100</pubDate>
        <description>
        <![CDATA[<p>So, I am considering installing BSD on my computer, specifically FreeBSD. Or maybe we should call it FreeBaSeD, whatever.</p>
                    <p>Now as you guys know I of course use Gentoo GNU/Linux as my desktop operating system. It's definitely my favorite distribution because it doesn't seem to have all the flaws other distros like Arch have. I haven't had many issues with Gentoo, I mean Portage is quite slow because it's written in Python but for the most part it has been really reliable and I am typing this post from Gentoo. However most other distros don't seem to be very reliable, not to mention some "recent" events are really encouraging me to switch over to a different operating system.</p>
                    <p>As you all know though, I use free (as in freedom)/libre software and because of this, there's no way I'd use something like Microsoft Windows or Apple macOS©️™️ again but there are many free operating systems, and of course FreeBSD is one of them. I've used OpenBSD in the past, not as a desktop operating system but I use it to host this website. It works perfectly for what I need it to do, but admittedly I'm still kind of Ubuntu user levels of familiar with the BSD operating systems.</p>
                    <p>Either way does this mean I'm going to switch from Gentoo to FreeBSD? Does this mean I'm no longer a Gentoo user? No, it does not, no. But why do I want to use BSD and not GNU/Linux? It's because recently the normies have taken over GNU/Linux and written mandatory garbage for it. One recent example is how Rust (the programming language) is now part of the Linux kernel. While it isn't mandatory yet, drivers and other basic stuff is probably going to be rewritten in it soon, just because the Rust programmers who have no business in the kernel development space can't even write a single line of C. There's now also other stupid software like systemd, Flatpak, Wayland and all this software that takes everything we like about GNU/Linux and throws it in the trash.</p>
                    <p>BSD has some of this stupid software, such as Wayland for example, but for the most part BSD seems pretty clean of the years of trash piled on top of GNU/Linux. I know I've rambled on about how GNU/Linux sucks and I haven't even made this blog post worthwhile, so for real though, why FreeBSD? Well simply, FreeBSD seems to be more like what GNU/Linux was.. you know, 15 years ago before the normies discovered it and ruined it for all of us (yes, even them). It seems to follow the UNIX philosophy much closer than GNU/Linux does these days. I should also add, the BSD community doesn't seem as horrible as the GNU/Linux community, which is of course a plus for various reasons. This may be because normies haven't found it yet, or maybe its users just want a functioning computer. Regardless, it seems like a much better place for someone like me.</p>
                    <p>Either way, this was just a short blog post on why I don't <em>really</em> like GNU/Linux, and why I may consider switching to a system with the BSD kernel. I have another one coming up very soon, as despite not being forced to make blog posts, I still want to put something up so you don't think I'm dead or something. Either way, if you have some experience with BSD, feel free to let me know if there are any huge problems with it but because I use for the most part (Still have the Intel Spyware Engine™️ sadly) free software, software support is not really a huge problem for me.</p>
                    <p>I feel like this post is slowly becoming filler so yeah, might as well end it.</p>]]>
        </description>
</item>
<item>
        <title>speedie.site now has a wiki!</title>
        <link>https://speedie.site/articles/post43.php</link>
        <guid>https://speedie.site/articles/post43.php</guid>
        <pubDate>Thu, 26 Jan 2023 00:00:00 +0100</pubDate>
        <description>
                <![CDATA[<p>This is just a brief blog post regarding some new somewhat important news for this website! speedie.site has received a wiki, which anyone may edit. No, this is not some bloated wiki solution, it's done using purely PHP and CSS, and articles are written in Markdown! This is great, because speedwm documentation is already written in Markdown and has been for a while. Not only that, but speedwm has it's own separate wiki, because a lot of information is speedwm related.</p>
                    <p>Now, I want to get speedwm 1.9 out soon, especially since it has been two full months since the last release and over 100 commits since then, but I want to move some documentation over to the speedwm specific wiki first, as I think the man page is growing very, <strong>very</strong> big. That is not great, not to mention any documentation in a tarball cannot be updated as the release has already happened. Not ideal, is it?</p>
                    <p>Also, a speedwm wiki was pretty much necessary at this point. While you <em>can</em> pull request to the speediegq repository on Codeberg, there's a lot of delay and work involved in that, when all you want to do is say, fix a simple typo or something like that. However not only can you edit existing articles written by me, but you can also create new articles if you feel like something is missing. While this is speedwm documentation, a lot of it also applies to dwm, so if you're into hacking on dwm you might want to check out the wiki!</p>
                    <p>As for the more general wiki, it's far, FAR from complete so far. In fact there is only one article. But I plan on slowly expanding it as time goes on. With that said, you may be wondering what wiki solution I went with. Did I write my own? What wiki solutions are there that aren't absolutely massive and terrible?</p>
                    <p>Of course, <a href="https://github.com/panicsteve/w2wiki">w2wiki</a>. w2wiki is written purely in PHP and CSS, and articles are written in Markdown as stated previously. I have to say I really like w2wiki and I have no plans to use something different. I will say, I don't really like the default CSS, however we're not soydevs here, so I changed that to fit the theme and minimalism of the regular speedie.site website.</p>
                    <p>Anyways, that's just a small post for today, I have two more suckless related posts coming up relatively soon, but after that I hope to write some more classic blog posts. I have been relatively busy with real life of course, so I haven't had time to write anything proper, although I have a relatively good amount of ideas.</p>
                    <p>That's it for today, thank you for reading, check out the <a href="https://wiki.speedie.site">general wiki</a>, as well as the <a href="https://speedwm.speedie.site">speedwm wiki</a> and have a nice day!</p>]]>
        </description>
</item>
<item>
        <title>..and a git repository (CGIT REVIEW!!!)</title>
        <link>https://speedie.site/articles/post44.php</link>
        <guid>https://speedie.site/articles/post44.php</guid>
        <pubDate>Sat, 28 Jan 2023 00:00:00 +0100</pubDate>
        <description>
            <![CDATA[<p>I don't think it needs to be said but I've been doing some changes to this website recently. If you saw yesterday's blog post, I talked about some changes I had made, such as introducing a speedwm and general wiki to the site. I made some changes to the wiki shortly after publishing that blog post, and today I made even more changes so I think it justifies another blog post. Either way, this blog post is practically just an extension to the last one.</p>
                    <p>Now, why did I make these changes, and why the title which (seemingly) has nothing to do with the point of this blog post anyway? Well, you see I decided to try to set up a Git server by myself for a few reasons and that's exactly what I really want to talk about, I just think I should put the wiki changes in this post as well. First of all, I should mention that the speedwm wiki has moved to <a href="https://speedwm.speedie.site">speedwm.speedie.site</a> and the more.. general wiki has moved to <a href="https://wiki.speedie.site">wiki.speedie.site</a>. I'm doing this because it's good practice, really. Besides, I want to be able to use projects/speedwm again if necessary. I have updated the blog post to reflect these changes of course, but just keep that in mind.</p>
                    <p>Alright, let's talk about <code>cgit</code>, which is likely why you clicked on this blog post in the first place. cgit as the name implies is a git frontend which allows you to go through commits and other nice things using your browser.. alright alright I think we all know what it is now but cgit is written in C, no not C++, Rust or any other garbage, just plain perfect C. It's also very minimal but still offers basic functionality and even some nice things like RSS feeds for commits, which I talked about in my blog post about <a href="https://codeberg.org">Codeberg</a>, which is really nice for people like myself who primarily use the internet through these feeds anyway.</p>
                    <p>I looked at other solutions as well, such as stagit but they all had annoying flaws which cgit didn't seem to have so I decided to attempt to host an instance of cgit. I would say it went relatively well, and it was definitely a learning experience. I don't think I've learned this much about Git in 30 minutes ever before, so I'm definitely glad I did it for that reason as well.</p>
                    <p>By now, you may be wondering if I'm going to leave Codeberg. I have no plans to leave Codeberg, but some of my projects are going to be moved to <a href="https://git.speedie.site">git.speedie.site</a> because internet independence is always a good thing, and I like the control this gives me. As of writing this blog post, speedwm, speedwm-extras, speedwm-wiki, libspeedwm, spmenu, st and speediegq all have repositories on git.speedie.site, some more are going to be moved and the Codeberg repositories for these are going to stay as backups that will be updated around each version bump/release. Some repositories will stay on Codeberg as it's just unnecessary to move them to git.speedie.site for various reasons such as lack of quality.</p>
                    <p>Either way, I think that's all I have to say, next blog post is probably going to be about my computer setup in general (it's VERY different from the norm, beyond just the operating system and window manager). So yeah, check out <a href="https://git.speedie.site">git.speedie.site</a>, and the wiki if you haven't already, and have a good day!</p>]]>
        </description>
</item>
<item>
        <title>speedwm 1.9 release</title>
        <link>https://speedie.site/articles/post45.php</link>
        <guid>https://speedie.site/articles/post45.php</guid>
        <pubDate>Sun, 05 Feb 2023 00:00:00 +0100</pubDate>
        <description>
        <![CDATA[<p>speedwm 1.9 was released so I thought I’d write this short blog post. Yes, there is a <em>real</em> blog post in the works as well, in fact it’s basically complete, but I think writing this is necessary.</p>
<p>Either way, speedwm 1.9 is out now, and I want to talk about some of the changes I’ve made to it, since there are some big changes that will definitely be noticed if you just update from 1.8 to 1.9. First of all, if you just updated, you might notice that most of the keybindings have been removed. Many of the chained keybindings have been removed, because I simply wasn’t ever using them. But that’s not what you noticed, is it?</p>
<p>I removed most of the keybindings that call <code>spawn()</code> (the function that runs a program) because if I leave them in, people need to have all that software installed to make the keybindings functional. That’s not great, so instead of dealing with that I simply made a copy of the old <code>mouse.h</code> and <code>keybinds.h</code> and uploaded them to my <code>dotfiles</code> repository on Codeberg.</p>
<p>Now, of course I still use the old list of keybinds myself, so how am I going to update keybinds efficiently? Well, that’s why I added a few lines to the Makefile. If there is a <code>keybinds.rl.h</code> for example, it will be temporarily copied to <code>keybinds.h</code> and the old file will be restored after the compilation, so the original file is intact but the binary contains the keybindings from <code>keybinds.rl.h</code>. This behavior is not exclusive to this header but also works on <code>bar.h</code>, <code>options.h</code>, <code>mouse.h</code>, and <code>status.h</code>.</p>
<p>In other changes, <code>dmenu</code> is no longer a dependency for speedwm, and is no longer used. Instead, speedwm now uses <code>spmenu</code>, my fork of dmenu which adds some useful things like color support, a proper keybind array, many more arguments and more. This fork was created to solve compatibility issues, as spmenu has a lot of arguments that dmenu simply does not have, and dmenu does not (by default) ignore arguments it does not recognize, something it should probably do because of all the patches available for it.</p>
<p>As for bug fixes, there are a lot of them. First of all, status modules now support pango markup, which was disabled by default previously. The window swallowing functionality now updates the icon, not doing so is a dumb oversight on my end, but 1.9 fixes it. I’ve also fixed the custom layout crashing. Previously it would crash when you try to enter an S-expression due to the (bad) handling of history. Instead of using the old terrible approach we’re just running a separate shell script and parsing <code>stdout</code>. Much better, and because it doesn’t read a file using <code>fgets()</code> the possibility for crashing is much smaller. <strong>Finally, I have fixed multi-monitor crashing. It’s a shame it took this long to be noticed, but I will make sure it works properly for every release from now on. On 1.8, you <em>can</em> mitigate this by disabling tag previews.</strong></p>
<p>I’ve also added a lot more documentation, although existing documentation has been shortened down. Documentation will now be found primarily on the wiki, which anyone has both read and write access to. Yes, I know this is risky but I’m using Git to back stuff up, so it should be fine even if someone is dumb enough to ruin it for everyone.</p>
<p>The update also includes a few (not a lot, but a few) new features like:</p>
<ul>
    <li>Added support for extra status, which is by default separated by “;”</li>
    <li>Added multi-monitor keybindings</li>
    <li>Query support, allowing you to run <code>speedwm -q &lt;query&gt;</code> which returns information about speedwm.</li>
    <li>Autostart doesn’t run on restart.</li>
</ul>
<p>Importantly though, speedwm-extras is no longer a dependency. You can still install it of course, and I still use it, but speedwm does not depend on it anymore. Either way, that’s it for this post, just a little update on speedwm since it has been over 2 months since the last release of speedwm was released. Expect 2.0 to take a long time, as I do not feel like pushing another update adding minimal changes. Thank you for reading, check out speedwm if you want an easy way into dwm and like efficient software, and have a good day!</p>]]>
        </description>
</item>
<item>
        <title>libvirt is the worst program ever made..</title>
        <link>https://speedie.site/articles/post46.php</link>
        <guid>https://speedie.site/articles/post46.php</guid>
        <pubDate>Mon, 06 Feb 2023 00:00:00 +0100</pubDate>
        <description>
        <![CDATA[<h3>Another rant.</h3>
                            <p><strong>Warning: This blog post, unlike most of my others features strong language, because I hate libvirt. Please leave if you're sensitive to this.</strong></p>
                            <p>I really, really REALLY hate libvirt. In fact it may be the worst program I have ever used, in fact it even manages to somehow outclass a lot of nonfree software, it is that bad. It's so bad I'm going to say fuck for the first time on this blog. And yes, I will take advantage of that. But first, what is libvirt and why am I complaining about it?</p>
                            <p>First, for this to make sense I'm going to talk a bit about my computing setup. I've got a fairly normal computer with an Intel Core i9 (backdoors included), and importantly two graphics cards (AMD RX 570+580), allowing me to pass one through to the virtual machine. As my host operating system, You guys know I use Gentoo, the best GNU/Linux distribution with a minimal kernel configuration and on top of that is speedwm with all the toggles set to zero. This Gentoo host is also LUKS encrypted. This is because the host is only used for running my virtual machines, which act as my actual "host". You can compare this to something like Qubes OS, where each operating system is its own container, only more based and more difficult to set up.</p>
                            <p>I do this because it allows me to easily monitor and backup each "machine". It's also pretty nice for security since I can just destroy the VM whenever I want, and I can choose to only pass through my mouse and keyboard and nothing else. Also, if I find a new cool GNU/Linux distribution I want to try, just clone the existing VM, rename it and install and when I'm done I can destroy that VM.</p>
                            <p>Now, to do this most people including myself use QEMU with KVM. QEMU is pretty nice and doesn't suck as much as libvirt does (we'll get into this shortly). QEMU doesn't do virtualization by itself, it's actually an emulator but combined with KVM (built into the Linux kernel) you've basically got a virtual machine. Only problem is that QEMU with KVM is very complicated and requires a fuck ton of different arguments to even work. So people write shell scripts to do this, which is fine, I'm all for scripting your way to the result you want but most people don't want to bother with this. So then, someone had enough with QEMU being difficult to use and writes a program called libvirt and it is the ungodly garbage responsible for all pain and suffering in the world. Seriously. libvirt basically has its own configuration file, which it then translates into QEMU argument on the fly and runs using your default shell. Fairly simple.. or that's what it should be if libvirt wasn't a garbage program written by absolute retards who have no business doing anything computer related.</p>
                        <h3>Why does it suck so much?</h3>
                            <p>Now that you hopefully understand what it is, why do I hate it so much? First of all, it creates more problems than it solves. What's the solution to having a complicated way to configure a program? Just add an even more complicated way to configure it, that will be perfect. QEMU is configured by using arguments like other programs, this gets complicated with a lot of arguments but it can be managed with a shell script. libvirt has an even longer configuration file, which is configured in HTML-like syntax that has been adapted to libvirt, so not only does it fail to solve a problem, it just forces the user to learn a new config and shove more shitty software up the already complicated and fucked up software stack on GNU/Linux.</p>
                        <h3>How can libvirt suck more?</h3>
                            <p>To make matters even worse, once the libvirt service has been started, it straight up refuses to fucking stop again. I run <code>rc-service libvirtd stop</code> and what does it do? Oh yeah that's right absolutely fucking nothing. Except it refuses to give me my USB and PCIe devices that was given to the guest so that means no ethernet anymore. That means I'm going to have to reboot my computer entirely and decrypt my hard drive before I can even try again. Fucking thief.</p>
                            <p>As if that wasn't enough, it doesn't even tell me when there's a configuration error. It just tries to start, silently fucks itself, steals my PCIe and USB devices, refuses to stop, forces me to reboot until I manage to find and fix the problem. You might be screaming right now, saying READ THE LOG FILE READ THE LOG FILE, but the log file contains nothing but shit, nothing useful, just obvious things like 'qemu started' or something along those lines.</p>
                            <p>That's where it ends right? Right? Well, no. Recently it has started failing to start for absolutely no reason other than just not wanting to start. It ends with me just rebooting over and over hoping it will FINALLY pass my mouse through and let me start using the virtual machine. Fuck libvirt.</p>
                        <h3>End.</h3>
                            <p>Well, that's the end of this one. I will probably go more into detail on how this setup works and why it is still superior to using an operating system on bare metal like most people do at some point. Have a good day!</p>]]>
        </description>
</item>
<item>
        <title>Ethical software is not ethical and should be abolished.</title>
        <link>https://speedie.site/articles/post47.php</link>
        <guid>https://speedie.site/articles/post47.php</guid>
        <pubDate>Tue, 07 Feb 2023 00:00:00 +0100</pubDate>
        <description>
            <![CDATA[<p>Good afternoon good sirs! So I think most of you that follow my blog are free software and privacy supporters. Even if you support the 'open source' movement more than the highly based free software movement, I think we can both agree on the fact that ethical software is not ethical and might actually be less ethical than nonfree software. I want to talk about this because while it is nothing new, I got reminded of it and thought it was an excellent topic for today.</p>
                    <p>If you're out of the loop, or maybe haven't fallen for the free software ideology as much as the rest of us, what is "ethical" software and why should it be abolished? Ethical software is a software movement similar to the free software and open source movements, which strive for freedom in technology. However, the difference is ethical software ultimately is not about user freedom but rather a hate license that allows users of the many licenses to allow and disallow usage of the software and source code based on the political views of the individual using the software. Don't worry, it doesn't end there because the licenses aren't just about politics but also other world "issues" (depending on your views).</p>
                    <p>Let's take the NoHarm license for example. It is recommended by the <a href="https://ethicalsource.dev/">ethical source</a> website and is one of the many licenses they promote. Most of the license looks similar to the GPL, that is until you get to section 5 where we can see some radical differences. This is also where most of the stupid terms can be read. But first, let's read the preamble where it says "As software developers, we engineer the infrastucture of the 21st century" and "We envisage a world free from injustice, inequality and the reckless destruciton of lives and our planet". Now we can see their priorities, it's no longer about user freedom but instead about social justice and promoting political ideas. Free software is for everyone, absolutely everyone, even the people who don't support it. The 'Do No Harm' license however is for everyone, but only if you believe in the same ideas as the author of the software.</p>
                    <p>Let's read through the first section, 'abuses of human rights'.</p>
                    <ul>
                        <li>Human trafficking</li>
                        <li>Sex trafficking</li>
                        <li>Slavery or indentured servitude</li>
                        <li>Discrimination based on age, gender, gender identity, race, sexuality, religion, nationality</li>
                        <li>Hate speech</li>
                    </ul>
                    <p>Most of this seems somewhat fair, as it's already illegal in most countries (hence abuses of human rights). But this is where the first problem comes in, why does a free software license need to mention any of this stuff when it's illegal anyway? And if it's illegal, chances are you don't care about following a software license anyway. Even if it's not illegal in your country, most of this is not even related to software or freedom. A license should not punish you for commiting any of these acts, that's why we have law enforcement. You might say, I don't do any of this so I don't care but that's just stupid. Aren't we fighting for user freedom? Why settle down just because <em>you're</em> following the license?</p>
                    <p>Next we have 'environmental destruction'.</p>
                    <ul>
                        <li>The extraction or sale of fossil fuels</li>
                        <li>The destruction of habitats for threatened or endangered species, including through deforestation or burning of forests</li>
                        <li>The abuse, inhumane killing or neglect of animals under human control</li>
                        <li>Industrial processes that generate waste products that threaten life</li>
                    </ul>
                    <p>Here we can see the license devolve further into the insanity that is politics. Even though the average person is not going to commit most or even any of the acts mentioned here anyway, we're fighting for user freedom, aren't we? 'The extraction or sale of fossil fuels' is stupid, because it does not even do any harm to <strong>living</strong> creatures on Earth, but rather benefits humanity in one way or another. I feel like this has slowly devolved into an anti-capitalism kind of license, which is very different from what it says in the preamble. Then we have 'Industrial processes that generate waste products that threaten life'. Nuclear generates (potentially) deadly waste products, yet you depend on it.</p>
                    <p>Alright, next is 'conflict and war' which is more stupidity for various reasons I'll go into in a moment.</p>
                    <ul>
                        <li>Warfare</li>
                        <li>War crimes</li>
                        <li>Weapons manufacturing</li>
                        <li>Violence (except when required to protect public safety)</li>
                    </ul>
                    <p>Okay, why is this stupid? First of all, if you're alright with commiting WAR CRIMES, do you really care about following a software license? No, and for the average person, good luck even starting a war. If you somehow manage to start a war, and want to use the software, and still care about following the license, it's still really stupid, a software license should not to any normal human being decide whether or not you can use it for war. I think we all can agree on this, no matter your opinion on war.</p>
                    <p>'Weapons manufacturing' is stupid too. There are valid, legal uses of weapons, such as hunting. This means, if I want to hunt I cannot use any ethical software. Really, really stupid. And violence is up to law, so it is pointless to put in a software license. Despite all of this, so far it's been at least somewhat reasonable. All that changes now, as it mentions 'addictive or destructive products and services'.</p>
                    <ul>
                        <li>Gambling</li>
                        <li>Tobacco</li>
                        <li>Products that encourage adversely addictive behaviours</li>
                    </ul>
                    <p>Now, what's wrong here? A lot, there are so many flaws here and I'll get into some of them. First off, it disallows gambling, which might be the first actual software related clause in this entire license. Yes, that's right. We're this far in and finally a real software license clause can be found. Anyways, this is stupid because there are a lot of ways to get around this, gambling is actually kind of subjective. I do think this is a bit too restrictive for a free software/open source license, and it would be considered nonfree due to section 5.</p>
                    <p>As for Tobacco, tobacco is definitely addictive, but it's up to each individual and no one is forcing you to use it so I think this point is unnecessary. This is also where the cracks in the license start to show, because how do you even integrate software or even electricity into tobacco? Anyways, for addictive behaviours, there are even more flaws with the license, because there are a lot of things that can be addictive. Does this mean you can't use the program with video games? What about using it at all, because the software <em>might</em> be addictive. Yeah, I don't know what they were thinking when they added this to the license.</p>
                    <p>The next section links to some other licenses, such as the 'Universal Declaration of Human Rights' and 'Convention on the Rights of the Child', none of which belongs in a free software license. I won't go into too much detail about this but you can read these licenses yourself if you want. The rest of the license continues like a standard copyleft license, which means all the cuck licensing tricks (such as relicensing) are not possible to pull off.</p>
                    <p>Now, finally, what do I think about 'Ethical' software? I think ethical software is unethical, more so than nonfree software. Despite some of the acts here being morally questionable, free software builds on fundemental ideas such as making sure every user of the software is guaranteed the four freedoms. This means, even if you're a war criminal who violates human rights, or something like that, you can still use and benefit from free software. You know, this is what I hate with people who constantly use social media, they are exactly the kind of people who would use and write a license like this. They care more about politics and social justice than writing a quality piece of software, or even making sure users are free to do whatever they want with the software. SJWs don't make the world a better place, they make it a significantly worse place, where freedom is ignored in favor of political opinions.</p>
                    <p>That's it for today, let me know what you think about ethical software, and have a good day!</p>]]>
        </description>
</item>
<item>
        <title>Software update</title>
        <link>https://speedie.site/articles/post48.php</link>
        <guid>https://speedie.site/articles/post48.php</guid>
        <pubDate>Sat, 25 Feb 2023 00:00:00 +0100</pubDate>
        <description>
            <![CDATA[<p>Today I want to just quickly talk about some important (and some lesser important) stuff regarding my software projects. First of all, let's talk about spmenu. In addition to the color support I added a month or two ago, spmenu now has image support. I initially couldn't think of many uses for this, however it's actually really useful. Let's say I want to list out all my wallpapers and set one as my wallpaper. My current wallpaper script actually uses a separate program for that, sxiv. But now that spmenu has image support I can actually just preview the wallpapers in spmenu right away, without an external program. This actually makes it more powerful than a lot of terminal emulators. Pretty cool if you ask me.</p>
                    <p>I have also made significant changes to another one of my projects, that being spDE. It now includes a helpful script which handles starting speedwm but more importantly handles installing configuration files. This means to install spDE now you only need to emerge it and use the spde commmand to set it up with configuration files. Saves even more time for me, and if you need an easy to use but efficient desktop environment which allows you to easily get into efficient software it's also good for that.</p>
                    <p>I also have a new project now called ivtools. ivtools is mostly a collection of ffmpeg and imagemagick snippets, whenever I need to do something with a video file I will put the ffmpeg command in a script. The goal is to eventually have scripts for most simple things a video editor can do, so that you don't need to start bloated editors like Blender or kdenlive when you just want to do basic video editing like adding music or cutting video. You can get ivtools <a href="https://git.speedie.site/ivtools">here</a>.</p>
                    <p>I have recently started using a program called dnote. dnote is a dmenu fork, but the only similarity it retains is libdrw and the general structure of dmenu because dnote is a notification daemon. This similarity to dmenu makes it really easy to add new things into it. I have myself added .Xresources and alpha into dnote. You can get my build <a href="https://git.speedie.site/dnote">here</a> if you want to try it out. You'll definitely see me using this in shell scripts soon, in fact I plan on migrating speedwm modules and speedwm-extras scripts to using it. It's great, pretty much notifications but better in every way.</p>
                    <p>As for speedwm, I'm pretty happy with it and while I have plans on doing things with it, they'll probably be in the form of a new project. For one, I want a rule and keybind configuration file which will require major changes to be made. I also want to rewrite the status, so that each status module is a different bar module.</p>
                    <p>Anyways, that was just an update on the projects I've been working on. No need to drag this blog post out longer so thank you for reading, have a good day!</p>]]>
        </description>
</item>
<item>
        <title>spDE - Now also on Arch based distros</title>
        <link>https://speedie.site/articles/post49.php</link>
        <guid>https://speedie.site/articles/post49.php</guid>
        <pubDate>Mon, 27 Feb 2023 00:00:00 +0100</pubDate>
        <description>
            <![CDATA[
                    <p>Yesterday I decided to get some work done and ported most of my Gentoo packages for my software, such as speedwm and spmenu but much more to Arch. Of course, first I had to learn how to actually do this, but as it turns out, it’s actually even easier than on Gentoo. I was able to create all of these packages, including testing in less than an hour.</p>
                    <p>I had to make a few minor changes to spDE for it to work on Arch, such as changing the owner of the home folder to the user rather than the user’s group but for the most part it works perfectly. No, the package will not be on the AUR as I do not want the user to have to deal with compiling the stuff locally. I also don’t want to deal with the AUR moderators potentially deleting packages.</p>
                    <p>With that said, if you want to install spDE on your Arch box, add my <a href="https://git.speedie.site/speedie-aur">arch repository</a> (instructions in README) and <code>pacman -Syyu</code>. Then simply <code>pacman -S spde</code> provided the sync completed successfully! The rest of the steps are the same as on Gentoo, run <code>spde -i</code>, <code>spde -a &lt;your user&gt;</code> and finally <code>startx /usr/bin/spde -r</code> to start spDE.</p>
                    <p>spDE on Arch is <em>nearly</em> identical to spDE on Gentoo. There are a few minor differences but they shouldn’t be that noticeable. If you don’t want the entire spDE package, you can choose to install the stuff individually, too. There are packages like <code>speedwm</code>, <code>speedwm-spde</code>, <code>spmenu</code>, <code>libspeedwm</code>, <code>speedwm-extras</code>, <code>fontctrl</code> and so on which can be installed without installing the entire thing.</p>
                    <p>That was just an update for those of you that are interested in running spDE on Arch, I have been putting this off for a long time so I’m glad I finally did it. Thank you for reading, install spDE if you want, and have a good day!</p>

            ]]>
        </description>
</item>
<item>
        <title>Normies are destroying GNU/Linux</title>
        <link>https://speedie.site/articles/post50.php</link>
        <guid>https://speedie.site/articles/post50.php</guid>
        <pubDate>Thu, 09 Mar 2023 00:00:00 +0100</pubDate>
        <description>
            <![CDATA[
                    <p>So, because this blog post marks blog post number 50, and because the first blog post is 1 year old today, I thought to celebrate I'd do a rewrite of my first blog post, which still holds true, actually more so than when I intially wrote it. Granted, the original blog post is terrible, it was fueled out of frustration and nothing more so let's give the topic the chance it deserves.</p>
                    <p>As well all know, GNU/Linux is an operating system and it has always been the outcast, it has always been less popular than other operating systems like Windows and macOS. Out of the outcast operating systems like BSD, Haiku and more however, it's pretty popular and it's growing in popularity. While this may seem like a good thing at first, when you actually dig deeper into what that means for GNU/Linux, you'll find many problems and I want to talk about those today.</p>
                    <p>So let's go back into the early days. Linus Torvalds developed the Linux kernel, which was used in combination with the GNU project. This means we now have a completely free software operating system. Great, now we don't have to use spyware nonfree software that doesn't respect your freedom anymore and everything is good for the small userbase. Previously GNU/Linux followed the UNIX philosophy rather closely, which is what made it so great. Of course there were exceptions to this rule, such as X11 (and today Wayland), however most software was minimal, and closely followed the UNIX philosophy like it was a religion, as that was expected out of software.</p>
                    <p>As GNU/Linux got more mainstream and normies got their hands on it, this freedom, this minimalism, all this stuff that made GNU/Linux so great started to disappear. When normies found this free operating system, naturally being normies they didn't want to actually learn anything about minimalism and free software, and certainly didn't want to enjoy any of the perks of it. Instead of that, they initially whined and complained about how it was different from what they're used to. And we, members of the GNU/Linux community in response did everything in our power to make the "Year of the GNU/Linux desktop" happen. Except..</p>
                    <p>We didn't. In response to normies complaining, we as a community at large started developing garbage, bloated software that throws everything that makes GNU/Linux and UNIX in general so great in the trash. We're no longer using text streams, we're no longer writing quality software with quality code, instead we're focusing on developing libraries on top of libraries that just add bloat to a project and create huge basically packages of software in an effort to please normies who refuse to appreciate the beauty of UNIX-like operating systems and just wanted to stick to what they're familiar with.</p>
                    <p>Here's the thing, If you're this kind of person who doesn't want to learn GNU/Linux, you don't want to learn about UNIX-like operating systems and you don't want to spend any time out of your day learning this stuff then why even bother using a new operating system in the first place? At that point, you might as well stick with Windows or macOS. But alright, fine. We can still have <em>our</em> section of the GNU/Linux community where traditional UNIX/Minimalist views are still appreciated, right? Well, no because eventually programmers start writing software which of course depends on all this normie software which is absolutely awful and now it becomes almost impossible to have a functioning system on GNU/Linux without this garbage software.</p>
                    <p>I haven't given any examples yet, but in my first version of this blog post I referred to Snaps, AppImages and Flatpaks, and while those do still meet the criteria here (although not in the present), I want to give some more examples which might make more sense. First, systemd. systemd is a collection of tools for GNU/Linux, and although many people hate systemd because it is "an init system", it is really a suite of tools. Therefore calling it bloated is not justified. However what is justified is valid criticism towards it. systemd provides a tool named "logind". So many programs depend on this, it is pretty much impossible to have a modern GNU/Linux system without this program installed on your computer. Now, that should be taken with a grain of salt because there are many different implementations of this tool, and those of you that use Gentoo may be familiar with one implementation called elogind. Still, I think this is an excellent example of dependencies that are used so much you cannot escape them.</p>
                    <p>But there are so many programs like these that we can't really escape, and the cause of these programs existing is usually the same. Normies want "easy" software, so in response we write terrible software which a normie will think is easy because Windows is terrible. However the worst of it came around the time Linus Tech Tips and all these other well known technology "entertainment" channels started covering GNU/Linux and giving it attention. When that happened and Windows/Mac users gave this OS a proper chance, developers around here scrambled to write as much normieware as possible to please these new users in the hopes of converting them into GNU/Linux users. Of course this failed, and just resulted in more terrible software.</p>
                    <p>I call this the "gaming wave", because suddenly all these gamers (often with NVIDIA graphics cards) came over here, because that's what Linus Tech Tips' fanbase is and wanted to play games. Of course, this failed because despite the effort from the people who play games around here, most GNU/Linux users don't really play games. In fact I barely play games myself anymore. I have nothing against people who play games, but the people who play games on GNU/Linux certainly have some blame to take here.</p>
                    <p>Lastly, before I end off this blog post I want to mention a few things regarding Wayland. In short, I'm definitely against it and that's for a few reasons. Wayland brings a lot of good things to the table, such as a cleaner codebase, less screen tearing, perhaps HDR support in the future, and so on and all that is fine by me. No complains there. Where the problem starts to show however is from a developer perspective. Yes, the Wayland display protocol <em>is</em> more minimal than X11 (that's not really an achievement) but a lot of that is because the Wayland mess has been moved over to the compositor forcing any developers to write thousands of lines of just absolute junk. This is absolutely terrible, and until the developers of Wayland change direction (highly doubt they will), I'm sticking with X11 until it's no longer feasible to do so.</p>
                    <p>Either way, that's what I wanted to say, stop using all of this stupid software whenever possible, and become a based GNU/Linux minimalist. I plan on getting a page up on replacements for stupid software which will kind of act as a guide on how to get into GNU/Linux minimalism for those of you that fell for this stupid software. If you have any questions or thoughts, feel free to send me an email.. and have a good rest of your day.</p>

            ]]>
        </description>
</item>
<item>
        <title>Important site update (and the Matrix)</title>
        <link>https://speedie.site/articles/post51.php</link>
        <guid>https://speedie.site/articles/post51.php</guid>
        <pubDate>Wed, 15 Mar 2023 00:00:00 +0100</pubDate>
        <description>
            <![CDATA[
                    <p>I'm going to keep this one short and to the point. As some of you may know, my domain is going to expire. It is going to expire on the 31st of March 2023, which is not far from today and that's what I'm going to talk about.</p>
                    <p>For those of you that don't know, my website uses a "free" TLD (top level domain). This seemed like a good option last year, but as I want to continue this stuff, it presents a problem. Freenom is the company that provides the .gq TLD, along with a few more domains such as .tk. Freenom has shown themselves to be problematic, and they have done things like taking away domains from people after the websites have become too popular. Renewing their domains is also difficult and annoying, and even then doesn't work all the time for all people.</p>
                    <p>Because of this, I decided to write this blog post, and to make sure my readers have a place to keep up with me if my website does collapse, I've created a Matrix channel which I recommend you join. You can join it <a href="https://matrix.to/#/#speedie:matrix.org">here</a>. You can start with Element, it's all free software unlike the previous Discord server.</p>
                    <p>I don't plan on making this a big thing like Forwarder Factory was, and in fact I don't want that either. This is simply going to be a small place for me to talk to my readers, discuss the website and other things like that.</p>
                    <p>Either way, my domain expires March 31st if I'm unable to renew it. If I manage to renew it, you can continue using the site like normal for an additional year. Otherwise, I'm simply going to purchase a new domain. I do not yet have another domain, which is why I recommend you join the Matrix channel.</p>
                    <p>That's really all I wanted to say, as the writer here I think it is important that you are informed about everything. My website code is all available for free on Codeberg so you can still have that if you want. Thanks for reading, have a good day!</p>
            ]]>
        </description>
</item>
<item>
        <title>Friendship ended with Gentoo, now Arch is my best friend!</title>
        <link>https://speedie.site/articles/post52.php</link>
        <guid>https://speedie.site/articles/post52.php</guid>
        <pubDate>Sun, 26 Mar 2023 00:00:00 +0100</pubDate>
        <description>
            <![CDATA[
                    <p>Alright so I have a brief announcement or something today and that is, I have officially stopped using Gentoo. Yes that's right, the Gentoo elitist is now an Arch cuck. But why, why would you commit such a crime you might say? Well, Gentoo has actually been giving me more and more problems for months now, and it doesn't seem to get any better.</p>
                    <p>I've had so many dumb issues with Gentoo recently, such as Xft fonts being broken, packages failing to emerge, <code>--depclean</code> removing my entire system, and the final straw, gnome-keyring issues that just do not occur on other GNU/Linux distributions. In case you're not aware, I have been using Arch on my laptop for months now, and while Arch has some annoying issues such as GPG keys constantly breaking pacman when updating, I find that it works much better now.</p>
                    <p>To make matters worse for Gentoo, syncing the repositories takes a very long time, and it's valuable time that I do not want to spend just because a program is slow and written in Python. Moving over to Arch was not difficult though. I said 'fuck it' yesterday at around 04:00 in the morning, and started installing Arch over Gentoo. Thankfully, as you guys know I have an arch repository containing nearly the same programs as my gentoo repository (overlay), and as such I was able to install my config files and all my programs using one command. It's super nice, otherwise I would've probably spent much more time on this.</p>
                    <p>Anyways, as for my overlay, I will probably update it every once in a while using maybe a docker container, but I'm going to be focusing on the arch repository because it's what I'm using. For those of you that actually use Arch, this might be good news for you because it means you will always be able to install my software using pacman. I know that some of you will probably be disappointed about this, because I'm kind of known as a Gentoo user at this point, but I just can't take Portage's stupidity anymore. If you need to however, feel free to remove my feed!</p>
                    <p>I also took the time to move /home to a separate partition, which is really nice if you want to reinstall quickly. Whatever, that's all I needed to say with this blog post. Have a good day!</p>
            ]]>
        </description>
</item>
<item>
        <title>I switched back to Microsoft.. here's why!</title>
        <link>https://speedie.site/articles/post53.php</link>
        <guid>https://speedie.site/articles/post53.php</guid>
        <pubDate>Sat, 01 Apr 2023 00:00:00 +0100</pubDate>
        <description>
            <![CDATA[
                    <p>As you guys may know if you have been a speedie.site reader for a while, I was a Gentoo user, and recently I switched to using Arch full time. However, I am yet again switching operating system because I just found out Windows is the best operating system ever made.</p>
            <h2>Linux sucks, but Windows is awesome!</h2>
                <p>Now, most of you probably use some open source Linux distribution on your computer. But Linux is open source, and that's bad. That means Russian hackers can steal your porn collection because of course they can see all the source code and backdoor it. When you're using Microsoft Windows on the other hand, the only one who can access your data is Microsoft, who will send that data to the NSA. This also makes sure your data is safe, and that you're following the law like any good citizen. When I'm using Windows I feel safe and no malware has access to my data. The same cannot be said for Linux or any other open source operating system</p>
                <p>These Linux users who never go outside or shower will say that this is malicious, or that it is spyware, or any other nonsense but the fact of the matter is the government already knows everything about you anyway. You should not care about privacy if you have nothing to hide, so of course Linux users have a lot to hide. The government would never do anything bad anyway, they only want the best for you.</p>
            <h2>Tiling window managers suck</h2>
                <p>Why would you use a tiling window manager? Only hackers use those. Tiling window managers are also really hard to use, I mean think about all the keybinds you need to remember to get good at using one.</p>
                <p>What about speedwm? I'm just kidding, I've been secretly using GNOME for years, and I was never using speedwm in the first place. Hating Wayland? Actually, I've been using a Wayland session on GNOME for a long time now. As we all know, X11 is old and slow, and it's not written in Rust so that makes it instantly bad. spmenu? It's just rofi with a theme.</p>

                <p>C programming language? Hell no, it's so hard to learn and it's so old. Real programmers use JavaScript for the frontend and Rust for the backend. Recently though, I've started using C# which is superior to both of these in every way. We all love Micorsoft.</p>
            <h2>Vim is only used by furries, neckbeards and weirdos</h2>
                <p>Vim is a meme Linux users force onto new users. In reality, Vim is hard to use and it's so slow, I can't even figure out how to exit it. If I can't even exit it, how can I use it to write code? Why wouldn't you just use a mouse anyway? It's not 1983 anymore, we have modern, proper computers for real people now. The only people who still use Vim are neckbeards who want to look cool on the internet but in reality don't have a life.</p>
                <p>Visual Studio Code on the other hand is the greatest code editor ever and it's what I've been using for months now, while people were under the impression that I'm an avid Vim user. It's "open source" so that the Linux neckbeards will use it, but uses a mouse, because it's 2023 and if you're not using a mouse for everything except typing, you're lost in the past. It also supports JavaScript plugins and has a lot of Microsoft telemetry, so they know you're doing a good job writing programs for the future.</p>

            <h2>Installing programs</h2>
                <p>Linux users claim that using their terrible package managers is better than downloading executables from the internet directly. This is just not true, because the package managers can be hijacked remotely by Russia to spread propaganda to all of the users. This doesn't happen when you download random executables from the internet, because Microsoft Defender is guarding your computer, and has a 100% success rate. As soon as malware tries to attack your computer, Microsoft Defender is there to stop it.</p>
            <h2>Software minimalism</h2>
                <p>Software minimalism is all a big joke. Why do you need your computer to use 100MB of system RAM idle? Unused RAM is wasted RAM. Microsoft makes sure to leave no RAM wasted, which makes it much better. Unlike suckless, Microsoft makes feature complete software that normal people can use. In fact, suckless is just a software project created by Microsoft's worst employees created to trick Linux users into thinking Linux is unusable, thus getting them to move over to Windows. Microsoft makes sure people join the beautiful land of Windows, where no one falls for memes, and everyone is secure.</p>
                <p>Conclusion then. After I found out Windows is better than Linux, I have decided to stop working on my meme projects, and join Bill Gates in helping him build the best operating system for normal people. Linux furries and neckbeards, join the land of Microsoft today, stop using the Matrix meme, come back to Discord, assist Microsoft and the NSA in catching criminals, and become a real member of society today. It's only a $100 operating system.</p>
            ]]>
        </description>
</item>
<item>
        <title>News/important update regarding the site</title>
        <link>https://speedie.site/articles/post54.php</link>
        <guid>https://speedie.site/articles/post54.php</guid>
        <pubDate>Fri, 14 Apr 2023 00:00:00 +0100</pubDate>
        <description>
            <![CDATA[
                    <p>I will keep this one short so you can actually read through it. Yesterday (13/04/2023) I purchased a domain, because as we all know I do not trust Freenom to keep my site up. This domain is a lot more reliable, however it does mean you will have to swap out '.gq' for '.site'. I have redirected <em>some</em> parts of my site. I have redirected the main <code>speedie.gq</code> domain, and I have also redirected rss.xml so that RSS readers won't complain. You should still change the URL, however if you exclusively consume my website through RSS you will get the message anyway because of this. Finally I redirected the wiki.</p>
                    <p>Switching over is not hard. The page is identical, and although SSL was not functioning earlier today, I have resolved the issue. So to switch over, just replace 'speedie.gq' with 'speedie.site'. This is especially important if you use Arch and my repository. If you do, you must edit <code>/etc/pacman.conf</code> and replace the URL. There may be a few sharp edges as of now, as I simply ran a few <code>sed</code> commands on the old site without looking through it properly, if there are issues please <a href="mailto:speedie@speedie.site">email me</a> so it gets fixed. I should also add I moved from Nginx to Apache a few days ago, so <a href="https://wiki.speedie.site">the speedie.site wiki</a> and <a href="https://speedwm.speedie.site">the speedwm wiki</a> should be functional again.</p>
                    <p>Anyway, that was just a short blog post about something relatively important. I will <em>probably</em> keep the speedie.gq domain updated as well, but I cannot guarantee it will work properly. If you have any questions, feel free to email me, or simply join the <a href="https://matrix.to/#/#speedie:matrix.org">Matrix space</a>. Either way, that's it, have a good rest of your day!</p>
            ]]>
        </description>
</item>
<item>
        <title>Dear bloggers: Your RSS feeds suck.</title>
        <link>https://speedie.site/articles/post55.php</link>
        <guid>https://speedie.site/articles/post55.php</guid>
        <pubDate>Wed, 19 Apr 2023 00:00:00 +0100</pubDate>
        <description>
            <![CDATA[
                    <p>Now that most of my issues regarding this site are resolved, I want to start writing about something. I have a lot of topics I want to talk about, however for many of these topics there's just not much content to them, so I apologize for the length of some of these.</p>
                    <p>Anyways what better topic to start with than this one. My blog isn't perfect, I post a lot of garbage here quite often, but what pisses me off is when people will write blog posts, have an RSS feed and then ruin it with one thing. They will put about 1/10 of the blog post in the <code>description</code> tag, and then they will have the blog post in full on their website.</p>

                    <p>This is extremely annoying, because it means I have to open up my bloated web browser just to view your blog post which could normally be read using my RSS reader, which is designed for reading blog posts. What if I want to read your blog post on the command line? Or what if I want to read your blog post when I don't have internet?</p>
                    <p>Good RSS readers like Newsboat and sfeed store the full feed locally, meaning you can actually read the articles even when you don't have any internet connection. But when you force me to go to your website, I can't just save it when I do have internet and read the blog post whenever I want to read it.</p>
                    <p>Now, I know why you would do this. If you have a site, chances are you want people to visit it. RSS is convenient, very convenient and I'm going to admit I don't actually visit the sites for blogs I follow very often, usually I read the feeds every day and then very occasionally visit the websites. But I still think this is annoying.</p>

                    <p>So, if you're going to have a blog and you plan on using RSS, please provide the full blog post in the description tag. I know this can cause issues with paragraphs, but you can steal my feed as a base if you want. Thanks for reading, and have a good day.</p>
            ]]>
        </description>
</item>
<item>
        <title>Why I don't use Wayland (and how it can be improved)</title>
        <link>https://speedie.site/articles/post56.php</link>
        <guid>https://speedie.site/articles/post56.php</guid>
        <pubDate>Fri, 28 Apr 2023 00:00:00 +0100</pubDate>
        <description>
            <![CDATA[
                    <p>Today I want to talk about Wayland, and why I don't use it. In case you're a normie and don't know what Wayland is, Wayland is this new display protocol created by the people over at Freedesktop. They want it to be better than the display protocol most GNU/Linux users are already using called X11. While I'm not against the idea of a new display protocol, in my opinion Wayland is a failure, and it fails at doing everything X11 did right, and that's what I want to talk about here. Note that most of this will be from a developer's perspective; if you're using GNOME, KDE or maybe even one of the many wlroots based compositors, your experience on Wayland is probably going to be pretty good.</p>
                    <h2>Terminology</h2>
                        <p>First, let's talk terminology. On X11 we have something called a 'Window manager', and as the name implies it manages your window. The window manager is the root window, meaning it's the first window. Other than that, it's just like any other window you may have. This is quite powerful, because it means in theory anything can be a window manager. You can try this for yourself on Xorg and xinit by running <code>startx /usr/bin/firefox</code>. What you should have is an X11 session with only firefox open and nothing else. This is why we have window managers, they allow us to spawn more windows and place those windows whereever we want. Even desktop environment users have a window manager, because your desktop environment comes bundled with one.</p>
                        <p>On Wayland and X11, we have something called a compositor. Let's ignore Wayland's definition completely for now. On a basic level, the compositor provides fancy effects such as transparency, rounded corners with anti-aliasing, shadows, animations and other things you may or may not want. One of the most popular compositors today is called Picom, and most standalone window manager users use it, if they use a compositor at all. This works by creating buffer where these effects are added, and then displaying the buffer to the user. This is why older machines may feel slow when a compositor is running, it's just not displaying that buffer quickly enough.</p>
                        <p>In X11, a client is pretty much the same thing as a window. I am going to be using the term 'window' throughout this blog post, but client is what I usually use when referring to an X11 window.</p>
                        <p>'Xorg' is an <em>implementation</em> of the X11 protocol, and it's the implementation most users are using. There are other ones like XFree86, but most users use Xorg.</p>
                    <h2>The compositor problem</h2>
                        <p>This is where Wayland's problem for me comes in. On X11 these two components are separate, so I can pick and choose each component and just combine what I like. With Wayland, they have decided to combine the compositor and window manager into one program, which to make it even more confusing is also called a compositor. Now, why is this so bad?</p>
                        <ul>
                            <li>Less modular</li>
                                <p>By combining the compositor and window manager, you're slowly making the display stack less and less modular. The days of choosing your compositor and choosing your window manager are now gone. It's all one big program, meaning even if you avoid desktop environments you're still going to have one big program that does everything. This is just not the way forward if you ask me. I believe the main reason for this is "making the desktop easier for new users", but at this point the GNU/Linux community should give up on new users who aren't willing to learn our technology.</p>
                            <li>Window managers are so complex</li>
                                <p>It is incredibly easy to make an X11 window manager, because again it's a window like any other. You really just need to create a window, read atoms and finally move/resize windows around. On Wayland you now also need to implement a compositor, which adds a lot of complexity and room for failure. Even one of the more minimal Wayland compsitors dwl, a dwm rewrite for Wayland has many more lines of code than the original dwm, because now you also need to do the compositing yourself. Not to mention, if you're using a minimal compositor like dwl, you can't have fancy effects and a minimal window manager, that's just not possible anymore, at least as of now.</p>
                                <p>This added complexity led to libraries like wlroots being created, and its slogan really says it all; "about 60,000 lines of code you were going to write anyway". However even with wlroots you still need to implement compositing, there's no way to have a separate compositor with your window manager.</p>
                            <li>No, a Wayland compositor is not a window like any other.</li>
                                <p>As I said earlier, a window manager on X11 is a window like any other. The only difference is it's the first window spawned (root window), and it is responsible for creating, resizing and displaying all other windows, although this is technically not a requirement. This is good because you can for example <code>startx /usr/bin/firefox</code> and have an X11 session that runs Firefox. Nothing else, just Firefox. This goes for any graphical program such as your terminal emulator, text editor, Emacs, etc. On Wayland, this is not possible, because windows do not implement compositing whatsoever. They are only responsible for creating themselves.</p>
                            <li>How about no compositor</li>
                                <p>I think this is worth mentioning as well. A lot of X11 users simply don't use a compositor at all. They deem it unnecessary, and it makes sense. If you don't need transparency, fancy effects, Vsync and other nice features like that, why should you waste your system resources on a compositor? Good luck omitting the compositor when you're using Wayland. You can't.</p>
                        </ul>
                        <p>Those are the problems that come as a result of combining the compositor and window manager. While I'm sure there could be benefits to combining the compositor and window manager as well, I just cannot think of a single reason.</p>
                    <h2>What change do I want to see?</h2>
                        <p>I want a more minimal display protocol. Wayland is more minimal so I think it passes here. What I also want is a more <em>modular</em> display protocol, and this is where Wayland seems to fail. X11 did this right, but I want it even more modular than X11. Everything should be separate, as long as it doesn't harm the user experience. Not to mention, more modular software is usually more secure, because each module is much smaller and easier to maintain.</p>
                        <p>I also want a library which allows creating BOTH X11 and Wayland clients without writing any extra code for it. This would be ideal, although I'm sure there are potential challenges from doing it this way. You might say, "Just use GTK or QT" but they also require writing extra code for Wayland or X11 support. This leads to developers not supporting one or the other.</p>
                        <p>For example, I want to add Wayland support into spmenu. I'd be happy to do so, but the problem is it would require rewriting the code for creating the window, handling events, keybinds, clicks, drawing, mapping, and more. It's just not something I want to deal with, which is why I've chosen to not write any of my software to use Wayland native libraries. There is XWayland, but to my knowledge there's no such thing in reverse.</p>
                    <h2>Conclusion</h2>
                        <p>I want to mention that I'm very much open-minded towards a new display protocol. I'm all for a new, more minimal, more stable display protocol. It's just that Wayland makes it a pain to write compositors, and in many ways it's a downgrade from X11, which is <em>really</em> old I might add. That's not to say Wayland has no improvements and X11 is perfect. The most popular X11 implementation, Xorg is extremely bloated and has a lot of legacy code that really doesn't matter today and the protocol itself is probably not much better.</p>
                        <p>It also has absolutely horrible security. But all things considered, I think X11 just has much better ideas on what the desktop should be than Wayland does. If Wayland improves the things I don't particularly like, I may end up switching to it. But as of now, X11 works fine for me and the benefits of Wayland just aren't worth it, so I am going to be sticking with X11. If you know of any solution to this problem, I'd love to hear it, and I'd love to give Wayland a proper chance.</p>
                        <p>Thank you for reading, have a good day!</p>

            ]]>
        </description>
</item>
<item>
        <title>Ungoogled Chromium: The best browser for most people</title>
        <link>https://speedie.site/articles/post57.php</link>
        <guid>https://speedie.site/articles/post57.php</guid>
        <pubDate>Mon, 01 May 2023 00:00:00 +0100</pubDate>
        <description>
            <![CDATA[
                        <p>Today I want to talk about my favorite web browser which I have been using for several months now and that is Chromium, specifically Ungoogled Chromium. Ungoogled Chromium is the best browser because it's fast, it respects your privacy, but also doesn't provide any extra bloat or anything, it's just a fast, privacy respecting web browser that does everything you need and nothing more. In a lot of ways it's the best web browser for minimalists, but also for normies because it requires no learning coming from Chrome or whatever.</p>
                        <p>If you are on Arch, you can get it from the AUR, and I also have a package available in my arch repository, so if you're using speedie-aur you can just <code>pacman -S ungoogled-chromium</code>. When you start it for the first time, if you're coming from regular Chromium or maybe the horrible spyware that is Google Chrome, you're going to notice that it looks a bit more minimal. That's because most of the Google junk has been removed, so what you have is what you actually need out of a web browser. By default, no search engine is active/enabled though, but if you want one you can go to the settings like in regular Chromium and simply add one.</p>
                        <p>The second thing you're likely going to notice pretty quickly about Ungoogled Chromium is by default it actually doesn't save cookies, so after you close your web browser you have to log in again. Now, I consider this a feature rather than a bug for security reasons, and while this isn't a security oriented web browser, most of its users are privacy enthusiasts, so I consider this a nice default. If you don't like this though, you can just change it in the settings. If you're setting up this browser for a normie, you may want to enable saving cookies, because in the society we live in normies would be very confused when their web browser doesn't keep them logged in.</p>
                        <p>Ungoogled Chromium is <strong>not</strong> hardened by default though. For good security I would install <code>JShelter</code>, <code>uBlock Origin</code>, <code>LocalCDN</code>, and a few other privacy oriented extensions. I would probably also install <code>Vimium</code>, which allows you to follow links using <code>f</code> and use general Vim-like keys to navigate the web, and of course a dark theme of some kind. But how do we install extensions anyway?</p>
                        <p>The reason I find this browser is better than others is because it's based on the Chromium web engine making it extremely fast, but it also respects your privacy by removing all the Google junk. Chromium is a good browser outside of all that Google spyware, because Google knows what a good browser is. A good browser is fast, minimal and allows you to view websites and nothing more. Google has known this since the beginning, and that's why this is such a good web browser. Other web browsers often fail at this.</p>
                        <p>I should note that due to all the Google junk being removed, you can't actually install extensions through the Chrome Web Store. However there's an extension you can install manually, which will allow extensions to be installed from the web store anyway, but you should RTFM for that. The extension is available <a href="https://github.com/NeverDecaf/chromium-web-store">here</a>, and was designed with ungoogled-chromium in mind. While you don't need it, it makes the process of "manually" installing extensions a whole lot easier. It even does updating for you, although it requires <em>some</em> user input.</p>
                        <p>As if this web browser wasn't already excellent, The <code>--app</code> argument makes it even more useful. In fact it makes all Electron applications basically obsolete. If you do.. for example <code>chromium --app="https://speedie.site"</code> you'll pretty much have an app for my website as the name implies just like Electron would do, except it's using your existing web browser. This makes it slightly more appealing. It even changes the icon to the favicon for the site. I'm using this feature for Element (the Matrix client I use) and Discord. I combine this with my run launcher to have super awesome web apps.</p>
                        <p>Overall, I highly recommend this browser. While it's not the most secure (you'd probably want GNU IceCat or LibreWolf for that), it's super fast, it's free as in freedom and it's minimal and clean. It provides sane defaults such as not storing cookies by default. It's a good web browser for both normies and people who know how to use technology, because I think both groups of people find its features appealing. If not, I guess the normie can continue using Chromium and you can use Ungoogled Chromium and get privacy from it. Thank you for reading, I highly recommend Ungoogled Chromium, and have a good day!</p>
            ]]>
        </description>
</item>
<item>
        <title>Swedish man rants about licenses again</title>
        <link>https://speedie.site/articles/post58.php</link>
        <guid>https://speedie.site/articles/post58.php</guid>
        <pubDate>Tue, 23 May 2023 00:00:00 +0100</pubDate>
        <description>
            <![CDATA[
                    <p>It is no secret that I strongly believe in copyleft licenses like the GNU General Public License (often shortened to GNU GPL or GPL) and the Mozilla Public License (MPL). Copyleft licenses as the name implies are the opposite of copyright licenses. With copyleft licenses, the user has the freedom to modify, study and distribute the software and source code. But unfortunately in recent years copyleft licenses have fallen out of favor thanks to tech companies like Microsoft heavily pushing too permissive licenses to developers. These licenses (which I will call 'cuck licenses' from now on) rob developers of their work. Now, it should probably be noted that I am not a lawyer, nor am I more experienced in any legal system that most people. I'm just here to talk about the best software license today.</p>
                    <p>With cuck licenses, the developer writes the code and puts it out on the internet like usual. The difference is there is nothing that prevents anyone from forking it and changing the license. You might ask why this matters. It matters because big tech companies like Microsoft, Google, Apple, Nvidia, Meta, and many more will take these free software projects, change the license to a nonfree license and no longer distribute the source code for the software. Most of these cuck licenses <strong>only</strong> require that the license notice is kept in every piece of code. However you're only distributing a binary though, the license isn't noticeable anyway.</p>
                    <p>I'm sure you can tell by now, but tech companies LOVE cuck licensers, because cuck licensers do the work for them and for free. The companies then just steal that source code and make their own proprietary variant. No attribution, no money, nothing. Some developer writes the code for free and a big tech company will steal it and make a nonfree spyware variant of it. When tech companies write software, they will usually license their own software too under the BSD licenses or more commonly, the MIT license. The MIT license is probably one of the worst licenses out there in terms of stripping the developer of his/her freedom. The user still has the freedom to use, study and modify the software. That is, until a tech company forks the project and changes the license to a nonfree one.</p>
                    <p>An example of a bad case of cuck licensing is MINIX, a portable UNIX like operating system. Because this project is cuck licensed, Intel decided to fork the project, apply some spyware modifications to it and relicense it under a proprietary license so no one knows what the code really does. Now all Intel users have this backdoor in their computer in what's called the Intel Management Engine (ME). Or take Google Chrome. Google forked the Webkit engine and made their own web engine called Blink. The Chromium browser which implements this engine is free software, but Google Chrome (which is very similar) is a nonfree program which does god knows what.</p>
                    <p>But you, the developer can fight back against this by licensing your software under a copyleft license. Copyleft licenses <em>usually</em> require that the forked software is licensed under the same license. So if you license your software under the GNU General Public License version 3, all copies of the software including forks are going to be licensed under that same license. This is great for developers because their code is always used for free software and not nonfree software. It's also great for users, as it means there will be less nonfree software to use and more free software to use instead.</p>
                    <p>I should note that I switched all software I've written from scratch to the GNU General Public License version 3 about a year ago or so from the MIT license and it gives me more freedom, and it also means everyone who uses my software or forks of my software is guaranteed freedom. It's a win for everybody, and it means together we're working towards a more free computing experience for everyone. It has its flaws though, which is why some may consider the LGPL or Lesser General Public License. This license unlike the regular GPL allows embedding the software in proprietary programs. This may actually be preferable in some cases, but in general you should stick to the regular GPL. I know there are more licenses than the GPL and MPL, but I'm not going to get into license specifics too much here. I'm mainly talking about the GPL because that's what I license all my software under.</p>
                    <p>Conclusion then. Cuck licensers write the software for big tech companies for free. They get nothing in return and users get a piece of crap proprietary program when the big company forks the originally free software program. With copyleft licenses on the other hand, the user is guaranteed the freedom to modify, study and distribute the source code or program. Switch to the GNU GPL today or any of the other GPL compatible copyleft licenses and truly become a free software computer programmer.</p>
            ]]>
        </description>
</item>
</channel>
</rss>
